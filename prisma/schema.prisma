// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  role                      Int       @default(100)
  stripeCustomerId          String?
  stripePaymentIntentId     String?
  stripePaymentIntentStatus String?
  accounts                  Account[]
  sessions                  Session[]
  posts                     Post[]
  Rental                    Rental[]
  Vehicle                   Vehicle[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  slug     String @unique
  title    String
  body     String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model StripeEvent {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model Rental {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  vehicleId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  user       User     @relation(fields: [userId], references: [id])
}

model Vehicle {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  image       String?
  userId      String    @db.ObjectId
  created_by  User      @relation(fields: [userId], references: [id])
  Pricing     Pricing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Pricing {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String  @db.ObjectId
  half      Int?
  full      Int?
  extended  Int?
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}
